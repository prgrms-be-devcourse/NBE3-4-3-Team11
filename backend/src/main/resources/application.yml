file:
  upload-dir: ${user.dir}/uploads/

spring:
  mail:
    host: ${SPRING_MAIL_HOST}
    port: ${SPRING_MAIL_PORT}
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  main:
    allow-bean-definition-overriding: true

  application:
    name: backend

  config:
    import: optional:file:.env[.properties]  # .env 파일을 .properties 형식으로 로드

  servlet:
    multipart:
      enabled: true
      max-request-size: 20MB
      max-file-size: 10MB

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  output:
    ansi:
      enabled: always

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        show_sql: false
        default_batch_fetch_size: 100
        highlight-sql: true
    show-sql: false

  security:
    oauth2:
      client:
        registration:
          naver:
            client_id: ${SPRING_SECURITY_NAVER_CLIENT_ID}
            client_secret: ${SPRING_SECURITY_NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/v1/user/naver/login/naver/callback
            authorization-grant-type: authorization_code
            scope:
              - email
          google:
            client-id: ${SPRING_SECURITY_GOOGLE_CLIENT_ID}
            client_secret: ${SPRING_SECURITY_GOOGLE_CLIENT_SECRET}
            redirect-uri: ${SPRING_SECURITY_GOOGLE_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope: email
            client-name: Google
            provider: google
          kakao:
            client-id: ${SPRING_SECURITY_KAKAO_CLIENT_ID}
            redirect-uri: ${SPRING_SECURITY_KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope: account_email
            client-name: Kakao
            provider: kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me

  data:
    redis:
      host: localhost
      port: 6379

  profiles:
    active: oauth

  web:
    resources:
      static-locations: file:${file.upload-dir}/
  mvc:
    static-path-pattern: /uploads/**

springdoc:
  default-produces-media-type: application/json;charset=UTF-8

logging:
  level:
    org.hibernate.SQL: ERROR
    org.hibernate.orm.jdbc.bind: ERROR
    org.hibernate.orm.jdbc.extract: ERROR
    org.springframework.data.redis: INFO
    root: INFO
    com.pofo.backend.common.security.jwt: DEBUG

jwt:
  secret:
    key: ${JWT_SECRET_KEY}
  expiration:
    time: ${JWT_VALIDATION_TIME}
  refresh-token:
    expiration-time: ${JWT_REFRESH_VALIDATION_TIME}

auth:
  key: ${AUTHORIZATION_KEY}

aes:
  secret:
    key: ${AES_SECRET_KEY}
